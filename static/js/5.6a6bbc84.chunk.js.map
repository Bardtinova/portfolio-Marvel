{"version":3,"sources":["components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js","components/skeleton/Skeleton.js","utils/setContent.js","resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/charSearchForm/CharSearchForm.js","components/errorBoundary/ErrorBoundary.js","resources/img/vision.png","components/pages/MainPage.js"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","src","img","alt","useMarvelService","_useHttp","_useState","useState","_useState2","_slicedToArray","process","setProcess","request","useCallback","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","url","method","body","headers","response","data","_args","arguments","wrap","_context","prev","next","length","undefined","fetch","sent","ok","Error","concat","status","json","abrupt","t0","stop","_x","apply","clearError","useHttp","_apiBase","_apiKey","getAllCharacters","offset","res","results","map","_transformCharacter","getCharacter","_ref2","_callee2","id","_context2","getCharacterByName","_ref3","_callee3","name","_context3","_x2","getAllComics","_ref4","_callee4","_args4","_context4","_transformComics","getComic","_ref5","_callee5","_context5","_x3","char","description","slice","thumbnail","path","extension","homepage","urls","wiki","comics","items","title","pageCount","price","prices","Skeleton","_jsxs","_Fragment","children","className","setContent","Component","Spinner","View","imgStyle","href","RandomChar","setChar","_useMarvelService","useEffect","updateChar","onCharLoaded","Math","floor","random","then","onClick","mjolnir","CharList","props","charList","setCharList","_useState3","_useState4","newItemLoading","setnewItemLoading","_useState5","_useState6","setOffset","_useState7","_useState8","charEnded","setCharEnded","onRequest","initial","onCharListLoaded","newCharList","ended","_toConsumableArray","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","elements","useMemo","arr","i","CSSTransition","timeout","classNames","tabIndex","ref","el","onCharSelected","onKeyPress","e","key","TransitionGroup","component","renderItems","disabled","CharInfo","charId","CharSearchForm","errorMessage","Link","to","Formik","initialValues","charName","validationSchema","Yup","required","onSubmit","Form","htmlFor","Field","type","placeholder","FormikErrorMessage","ErrorBoundary","_Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","args","Array","_key","call","state","error","_createClass","value","errorInfo","console","log","this","setState","MainPage","selectedChar","Helmet","content","decoration"],"mappings":"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","file":"static/js/5.6a6bbc84.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{display: 'block', width: '250px', height: '250px', objectFit: 'contain', margin: '0 auto'}} src={img} alt='Error'/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import { useHttp } from \"../hooks/http.hook\";\r\n\r\n\r\nconst useMarvelService  = () => {\r\nconst { request, clearError, process, setProcess} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=30a0bbb445710a12362bdc1e4a953e5d';\r\n    const _baseOffset = 210;\r\n    \r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n      const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n      return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getCharacterByName = async (name) => {\r\n\t\tconst res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n\t\treturn res.data.results.map(_transformCharacter);\r\n\t};\r\n\r\n    const getAllComics = async (offset = 0) => {\r\n        const res = await request(\r\n            `${_apiBase}/comics?orderBy=-issueNumber&limit=8&offset=${offset}&${_apiKey}`\r\n        );\r\n            return res.data.results.map(_transformComics);\r\n    };\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComics(res.data.results[0]);\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description ? `${char.description.slice(0, 220)}...` : 'There is no description here!',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items \r\n        }\r\n    }\r\n\r\n    const _transformComics = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title,\r\n            description: comics.description || \"There's no description\",\r\n            pageCount: comics.pageCount ? `${comics.pageCount} p.` : \"No information about the number of pages\",\r\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n            price: comics.prices[0].price ? `${comics.prices[0].price}$` : \"not available\" \r\n        };\r\n    };\r\n\r\n    return {clearError,\r\n            process,\r\n            setProcess,\r\n            getAllCharacters,\r\n            getCharacterByName,\r\n            getCharacter,\r\n            getAllComics,\r\n            getComic\r\n        };\r\n\r\n};\r\n\r\nexport default useMarvelService;","import {useState, useCallback} from 'react';\r\n\r\nexport const useHttp = () => {\r\n    \r\n    const [process, setProcess] = useState('waiting');\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n\r\n        setProcess('loading');\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            return data;\r\n        } catch(e) {\r\n            setProcess('error');\r\n            throw e;\r\n        }\r\n\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => {\r\n        setProcess('loading');\r\n    }, []);\r\n\r\n    return {request, clearError, process, setProcess}\r\n}\r\n\r\n","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Spinner from '../components/spinner/Spinner';\r\nimport ErrorMessage from '../components/errorMessage/ErrorMessage';\r\nimport Skeleton from '../components/skeleton/Skeleton';\r\n\r\n\r\nconst setContent = (process, Component, data) => {\r\n    switch (process) {\r\n        case 'waiting' :\r\n            return <Skeleton/>;\r\n        case 'loading':\r\n            return <Spinner/>;\r\n        case 'confirmed':\r\n            return <Component data={data}/>;\r\n        case 'error': \r\n            return <ErrorMessage/>;\r\n        default:\r\n            throw new Error('Unexpected process state');\r\n    }\r\n}\r\n\r\nexport default setContent;","export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import { useState, useEffect } from 'react';\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContent';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\n\nconst RandomChar = () => {\n    \n    const [char, setChar] = useState(null);\n            \n    const { getCharacter, clearError, process, setProcess} = useMarvelService();\n\n    \n    useEffect(() => {\n        updateChar();\n       /*  const timerId = setInterval(updateChar, 6000);\n\n        return () => {\n            clearInterval(timerId);\n        } */\n    // eslint-disable-next-line react-hooks/exhaustive-deps        \n    }, [])\n       \n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n        getCharacter(id)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'));\n    }\n\n     return (\n        <div className=\"randomchar\">\n            {setContent(process, View, char)}\n            \n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button onClick={updateChar} className=\"button button__main\">\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>\n    )\n}\n\nconst View = ({data}) => {\n    const {name, description, thumbnail, homepage, wiki} = data;\n    let imgStyle = {'objectFit': 'cover'};\n    if (thumbnail ===\"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\") {\n        imgStyle = {'objectFit': 'contain'};\n    }\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle}/>\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;","import {useState, useEffect, useRef, useMemo} from 'react';\nimport PropTypes from 'prop-types';\nimport {CSSTransition, TransitionGroup} from 'react-transition-group';\n\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from  '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './charList.scss';\n\nconst setContent = (process, Component, newItemLoading) => {\n    switch (process) {\n        case 'waiting' :\n            return <Spinner/>;\n         case 'loading':\n            return newItemLoading ? <Component/> : <Spinner/>;\n        case 'confirmed':\n            return <Component/>;\n         case 'error': \n            return <ErrorMessage/>;\n         default:\n            throw new Error('Unexpected process state');\n    }\n}\n\nconst CharList = (props) => {\n\n    const [charList, setCharList] = useState([]);\n    const [newItemLoading, setnewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [charEnded, setCharEnded] = useState(false);\n    \n    const {getAllCharacters,  process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n    // eslint-disable-next-line react-hooks/exhaustive-deps    \n    }, [])\n\n    const onRequest = (offset, initial) => {\n        initial ? setnewItemLoading(false) : setnewItemLoading(true);\n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n            .then(() => setProcess('confirmed'));\n    }\n\n    const onCharListLoaded = async(newCharList) => {\n        let ended = false;\n        if (newCharList.length < 9) {\n            ended = true;\n        }\n        setCharList([...charList, ...newCharList]);\n        setnewItemLoading(false);\n        setOffset(offset + 9);\n        setCharEnded(ended);\n    }\n\n    const itemRefs = useRef([]);\n\n    const focusOnItem = (id) => {\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n\n    function renderItems (arr){\n        const items =  arr.map((item, i) => {\n            let imgStyle = {'objectFit' : 'cover'};\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = {'objectFit' : 'unset'};\n            }\n            \n            return (\n                <CSSTransition key={item.id} timeout={500} classNames=\"char__item\">\n                    <li \n                        className=\"char__item\"\n                        tabIndex={0}\n                        ref={el => itemRefs.current[i] = el}\n                        onClick={() => {\n                            props.onCharSelected(item.id);\n                            focusOnItem(i);\n                        }}\n                        onKeyPress={(e) => {\n                            if (e.key === ' ' || e.key === \"Enter\") {\n                                props.onCharSelected(item.id);\n                                focusOnItem(i);\n                            }\n                        }}>\n                            <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n                            <div className=\"char__name\">{item.name}</div>\n                    </li>\n                </CSSTransition>\n            )\n        });\n\n        return (\n            <ul className=\"char__grid\">\n                <TransitionGroup component={null}>\n                    {items}\n                </TransitionGroup>\n            </ul>\n        )\n    }\n    \nconst elements = useMemo(() => {\n    return setContent(process, () => renderItems(charList), newItemLoading);\n    // eslint-disable-next-line\n}, [process])\n\n    return (\n        <div className=\"char__list\">\n           {elements}\n            <button \n                disabled={newItemLoading} \n                style={{'display' : charEnded ? 'none' : 'block'}}\n                className=\"button button__main button__long\"\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;","import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContent';\n\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n\n    const [char, setChar] = useState(null);\n    \n\n    const {getCharacter, clearError, process, setProcess} = useMarvelService();\n\n        \n    const updateChar = () => {\n        const {charId} = props;\n        if (!charId) {\n            return;\n        }\n\n        clearError();\n        getCharacter(charId)\n        .then(onCharLoaded)\n        .then(() => setProcess('confirmed'))\n    }\n\n    useEffect(() => {\n        updateChar();\n    // eslint-disable-next-line react-hooks/exhaustive-deps   \n    }, [props.charId])\n\n    const onCharLoaded = (char) => {\n            setChar(char);\n    }\n\n    \n    return (\n        <div className=\"char__info\">\n            {setContent(process, View, char)}\n        </div>\n    )\n}\n\nconst View = ({data}) => {\n    const {name, description, thumbnail, homepage, wiki, comics} = data;\n    let imgStyle = {'objectFit': 'cover'};\n    if (thumbnail ===\"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\") {\n        imgStyle = {'objectFit': 'fill'};\n    }\n    return (\n        <>\n            <div className=\"char__basics\">\n                    <img src={thumbnail} alt={name} style={imgStyle}/>\n                    <div>\n                        <div className=\"char__info-name\">{name}</div>\n                        <div className=\"char__btns\">\n                            <a href={homepage} className=\"button button__main\">\n                                <div className=\"inner\">homepage</div>\n                            </a>\n                            <a href={wiki} className=\"button button__secondary\">\n                                <div className=\"inner\">Wiki</div>\n                            </a>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"char__descr\">\n                    {description}\n                </div>\n                <div className=\"char__comics\">Comics:</div>\n                <ul className=\"char__comics-list\">\n                    {comics.length > 0 ? null : 'There is no comics with this character'}\n                    {\n                        \n                        comics.map((item, i) => {\n                            // eslint-disable-next-line array-callback-return\n                                if (i > 9) return;\n                              return (\n                                <li key={i} className=\"char__comics-item\">\n                                    {item.name}\n                                </li>\n                            )\n                        })\n                    }\n            </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\n\nexport default CharInfo;","import { useState } from \"react\";\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from \"formik\";\r\nimport * as Yup from 'yup';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport useMarvelService from \"../../services/MarvelService\";\r\nimport setContent from '../../utils/setContent';\r\n\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nimport './charSearchForm.scss';\r\n\r\nconst CharSearchForm = () => {\r\n    const [char, setChar] = useState(null);\r\n    const {getCharacterByName, clearError, process, setProcess} = useMarvelService();\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = (name) => {\r\n        clearError();\r\n\r\n        getCharacterByName(name)\r\n            .then(onCharLoaded)\r\n            .then(() => setProcess('confirmed'));\r\n    }\r\n\r\n    const errorMessage = process === 'error' ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\r\n    const results = !char ? null : char.length > 0 ?\r\n                    <div className=\"char__search-wrapper\">\r\n                        <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\r\n                        <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\r\n                            <div className=\"inner\">To page</div>\r\n                        </Link>\r\n                    </div> : \r\n                    <div className=\"char__search-error\">\r\n                        The character was not found. Check the name and try again\r\n                    </div>;\r\n\r\n    return (\r\n        <div className=\"char__search-form\">\r\n            <Formik\r\n                initialValues = {{\r\n                    charName: ''\r\n                }}\r\n                validationSchema = {Yup.object({\r\n                    charName: Yup.string().required('This field is required')\r\n                })}\r\n                onSubmit = { ({charName}) => {\r\n                    updateChar(charName);\r\n                }}\r\n            >\r\n                <Form>\r\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\r\n                    <div className=\"char__search-wrapper\">\r\n                        <Field \r\n                            id=\"charName\" \r\n                            name='charName' \r\n                            type='text' \r\n                            placeholder=\"Enter name\"/>\r\n                        <button \r\n                            type='submit' \r\n                            className=\"button button__main\"\r\n                            disabled={process === 'loading'}>\r\n                            <div className=\"inner\">find</div>\r\n                        </button>\r\n                    </div>\r\n                    <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\r\n                </Form>\r\n            </Formik>\r\n            {results}\r\n            {errorMessage}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CharSearchForm;","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        console.log(error, errorInfo);\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorMessage/>\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { useState } from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport CharSearchForm from \"../charSearchForm/CharSearchForm\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n    const [selectedChar, setChar] = useState(null);\r\n\r\n    const onCharSelected = (id) => {\r\n       setChar(id);\r\n     }\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Marvel information portal\"\r\n                />\r\n                <title>Marvel information portal</title>\r\n            </Helmet>\r\n            <ErrorBoundary>\r\n                <RandomChar/>\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected={onCharSelected}/>\r\n                </ErrorBoundary>\r\n                <div>\r\n                    <ErrorBoundary>\r\n                        <CharInfo charId={selectedChar}/>\r\n                    </ErrorBoundary>\r\n                    <ErrorBoundary>\r\n                        <CharSearchForm/>\r\n                    </ErrorBoundary>\r\n                </div>\r\n             </div> \r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage;"],"sourceRoot":""}